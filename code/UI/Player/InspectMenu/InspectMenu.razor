@using Sandbox;

@namespace TTT.UI

@if (Game.LocalPawn is not TTT.Player player)
{
    return;
}

<root class="text-shadow">
    <div class="inspect-container">
        <div style="flex-direction: column">
            <div class="header-panel">
                <img src="avatar:@_corpse.Player.SteamId" class="avatar-image box-shadow" />
                <text class="role-label" style="color: @_corpse.Player.Role.Color.Hex">@_corpse.Player.Role.Title</text>
                <text class="player-label">@_corpse.Player.SteamName</text>
            </div>
            <div>
                @if (_corpse.Player.IsConfirmedDead && player.IsAlive)
                {
                    <button 
                        @onclick=@CallDetective icon="search" 
                        class="call-detective @(_corpse.HasCalledDetective ? "inactive" : "")">
                        @("Call Detective")
                    </button>
                }
            </div>
        </div>
        <div @ref=IconsContainer class="icons-container">
            @{
                var timeSinceDeath = _corpse.Player.TimeSinceDeath.Relative.TimerString();
                <InspectEntry 
                IconPath="/ui/inspectmenu/time.png" 
                IconText=@timeSinceDeath 
                ActiveText=@($"They died roughly {timeSinceDeath} ago.") />

                var (deathText, deathActiveText) = GetCauseOfDeathStrings();
                <InspectEntry 
                IconPath="/ui/none.png" 
                IconText=@deathText 
                ActiveText=@deathActiveText />

                var weaponInfo = _corpse.Player.LastAttackerWeaponInfo;
                if ( weaponInfo is not null ) 
                {
                    <InspectEntry 
                    IconPath=@weaponInfo.IconPath 
                    IconText=@($"{weaponInfo.Title}") 
                    ActiveText=@($"It appears a {weaponInfo.Title} was used to kill them.") />
                }

                if (_corpse.Player.LastDamage.IsHeadshot()) 
                {
                    <InspectEntry 
                    IconPath="/ui/inspectmenu/headshot.png" 
                    IconText="Headshot" 
                    ActiveText="The fatal wound was a headshot. No time to scream." />
                }

                if (!_corpse.TimeUntilDNADecay)
                {
                    <InspectEntry 
                    IconPath="/ui/inspectmenu/dna.png" 
                    IconText=@($"DNA {_corpse.TimeUntilDNADecay.Relative.TimerString()}") 
                    ActiveText=@($"The DNA sample will decay in {_corpse.TimeUntilDNADecay.Relative.TimerString()}.") />
                }

                if (_corpse.Player.LastSeenPlayer.IsValid()) 
                {
                    <InspectEntry 
                    IconPath="/ui/inspectmenu/lastseen.png"
                    IconText=@player.LastSeenPlayer.SteamName 
                    ActiveText=@($"The last person they saw was {player.LastSeenPlayer.SteamName}... killer or coincidence?") />
                }

                if ( player.PlayersKilled.Count > 0 ) 
                {
                    var activeText = "You found a list of kills that confirms the death(s) of... ";
                    for ( var i = 0; i < player.PlayersKilled.Count; ++i ) 
                    {
                        activeText += i == player.PlayersKilled.Count - 1 ? $"{player.PlayersKilled[i].SteamName}." : $"{player.PlayersKilled[i].SteamName}, ";
                    }

                    <InspectEntry 
                    IconPath="/ui/inspectmenu/killlist.png"
                    IconText="Kill List" 
                    ActiveText=@activeText />
                }

                if ( !_corpse.C4Note.IsNullOrEmpty() ) 
                {
                    <InspectEntry 
                    IconPath="/ui/inspectmenu/c4note.png"
                    IconText="C4 Defuse Note"
                    ActiveText=@($"You find a note stating that cutting wire {_corpse.C4Note} will safely disarm the C4.") />
                }
                
                if ( !_corpse.LastWords.IsNullOrEmpty() ) 
                {
                    <InspectEntry 
                    IconPath="/ui/inspectmenu/lastwords.png"
                    IconText="Last Words"
                    ActiveText=@($"Their last words were... \"{_corpse.LastWords}\"") />
                }

                if ( !_corpse.Perks.IsNullOrEmpty() ) 
                {
                    foreach ( var perk in _corpse.Perks ) 
                    {
                        <InspectEntry 
                        IconPath=@perk.IconPath
                        IconText=@perk.Title
                        ActiveText=@($"They were carrying {perk.Title}.") />
                    }
                }
            }
        </div>
        <text class="active-text @(_selectedInspectEntry is not null ? "fade-in" : "")">
            @_selectedInspectEntry?.ActiveText
        </text>
    </div>
</root>

<style>
    InspectMenu {
        position: absolute;
        width: 100%;
        height: 100%;
        pointer-events: all;
        text-align: center;
        z-index: 2;

        .inspect-container {
            position: absolute;
            width: 100%;
            height: 100%;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            transition: transform 0.25s ease-out;

            .header-panel {
                flex-direction: row;
                align-items: center;

                .avatar-image {
                    width: 80px;
                    height: 80px;
                    margin: 10px;
                    border-radius: 4px;
                }

                .role-label {
                    font-size: 50px;
                    font-weight: 500;
                }

                .player-label {
                    font-size: 50px;
                    font-weight: 500;
                }
            }

            .call-detective {
                position: absolute;
                top: -10px;
            }

            .icons-container {
                max-width: 50%;
                display: flex;
                flex-wrap: wrap;
                align-items: center;
                justify-content: center;
                margin: 25px;
            }

            .active-text {
                height: 1px;
                width: 25%;
                margin: 25px;
                font-size: 18px;
                transition: opacity 0.25s ease-out;
                justify-content: center;
            }
        }
    }
</style>