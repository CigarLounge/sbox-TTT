
@BaseClass = BaseProperties_matt_ttt
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// TTT.CreditAdjust
//
@PointClass base(BaseProperties_matt_ttt) = ttt_credit_adjust : "Changes the amount of credits upon the activator."
[
	credits(integer) : "Credits" : 100 : "Amount of credits to remove from activator. Negative numbers add credits. Removes 1 credit by default."

	input ExchangeCredits(void) : ""

	output OnSuccess(void) : "Fires when credits are successfully added or removed from activator."
	output OnFailure(void) : "Fires if credits cannot be removed or added to activator. Such as not having enough credits for removal as a player cannot have 'negative' credits."
]

//
// TTT.ForceWin
//
@PointClass base(BaseProperties_matt_ttt) = ttt_force_win : "Forces round to end and win be awarded to team depending on input."
[
	team(choices) : "Team" : 0 : "The name of the team that will be forced to win." =
	[
		0 : "None"
		1 : "Innocents"
		2 : "Traitors"
	]
	use_activators_team(boolean) : "Use Activators Team" : 0 : "OVERRIDES `Team` PROPERTY. When ActivateForceWin() is fired, this will award a win to the team of the activating player."

	input ActivateForceWin(void) : ""
]

//
// TTT.GameText
//
@PointClass base(BaseProperties_matt_ttt) = ttt_game_text : "Add text entry to the game feed when input fired."
[
	message(string) : "Message" : "" : ""
	receiver(choices) : "Receiver" : 1 : "Who will this message go to?" =
	[
		0 : "All"
		1 : "Activator"
		2 : "Innocents"
		3 : "Traitors"
	]
	text_color(color255) : "Color" :  : ""

	input DisplayMessage(void) : ""
]

//
// TTT.MapSettings
//
@PointClass base(BaseProperties_matt_ttt) = ttt_map_settings : ""
[

	output SettingsSpawned(void) : "Fired after PostLevelLoaded runs and MapSettings entity is found."
	output RoundPreparation(void) : "Fired once Preround begins."
	output RoundStart(void) : "Fired once round starts and roles are assigned."
	output RoundEnd(void) : "Fired once a win condition is met."
]

//
// TTT.RoleCheck
//
@PointClass base(BaseProperties_matt_ttt) 
metadata
{
	entity_tool_name = "Role Check"
	entity_tool_group = "TTT"
	entity_tool_tip = "Used to test the assigned role of the activator."
}
= ttt_role_check : ""
[
	check_value(string) : "Role" : "Traitor" : "The name of the `Role` to check for. Ex. Innocent, Detective, Traitor"

	input Activate(void) : ""

	output OnPass(void) : "Fires if activator's check type matches the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
	output OnFail(void) : "Fires if activator's check type does not match the check value. Remember that outputs are reversed. If a player's role/team is equal to the check value, the entity will trigger OnPass()."
]

//
// TTT.MagnumAmmo
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/ammo/ammo_magnum/ammo_magnum.vmdl" ) model() = ttt_ammo_magnum : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.RandomAmmo
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/ammo/ammo_smg/ammo_smg.vmdl" ) 
metadata
{
	entity_tool_name = "Random Ammo"
	entity_tool_group = "TTT"
	entity_tool_tip = "Place where a random ammo box will spawn in the beginning of the round."
}
= ttt_ammo_random : ""
[
]

//
// TTT.RifleAmmo
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/ammo/ammo_rifle/ammo_rifle.vmdl" ) model() = ttt_ammo_rifle : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.ShotgunAmmo
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/ammo/ammo_shotgun/ammo_shotgun.vmdl" ) model() = ttt_ammo_shotgun : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.SMGAmmo
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/ammo/ammo_smg/ammo_smg.vmdl" ) model() = ttt_ammo_smg : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.SniperAmmo
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/ammo/ammo_sniper/ammo_sniper.vmdl" ) model() = ttt_ammo_sniper : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.Cigar
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/cigar/cigar.vmdl" ) = ttt_equipment_cigar : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.AK47
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_ak47.vmdl" ) = ttt_weapon_ak47 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.Bekas
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_bekas.vmdl" ) = ttt_weapon_bekas : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.Huge
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mg4.vmdl" ) = ttt_weapon_huge : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.M4
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_m4.vmdl" ) = ttt_weapon_m4 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.M9
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_vertec.vmdl" ) = ttt_weapon_m9 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.MP5
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mp5.vmdl" ) = ttt_weapon_mp5 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.MP7
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mp7.vmdl" ) = ttt_weapon_mp7 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.P250
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_p250.vmdl" ) = ttt_weapon_p250 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.P90
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_p90.vmdl" ) = ttt_weapon_p90 : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.RandomWeapon
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mp5.vmdl" ) 
metadata
{
	entity_tool_name = "Random Weapon"
	entity_tool_group = "TTT"
	entity_tool_tip = "Place where a random weapon will spawn in the beginning of the round."
}
= ttt_weapon_random : ""
[
	ammo_type_to_spawn(choices) : "Selected Ammo Type" : 0 : "If changed, will only spawn weapons of the selected ammo type." =
	[
		0 : "None"
		1 : "Pistol SMG"
		2 : "Shotgun"
		3 : "Sniper"
		4 : "Magnum"
		5 : "Rifle"
	]
	ammotospawn(integer) : "Amount of Ammo" : 0 : "Defines the amount of matching ammo entities that should be spawned near the weapons."
]

//
// TTT.Revolver
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mr96.vmdl" ) = ttt_weapon_revolver : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.Scout
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_spr.vmdl" ) = ttt_weapon_scout : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.SilencedPistol
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_vertec-silenced.vmdl" ) = ttt_weapon_silencedpistol : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.SilentFox
//
@PointClass base(BaseProperties_matt_ttt) editormodel( "models/weapons/w_mp7-silenced.vmdl" ) = ttt_weapon_silentfox : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TTT.RoleButton
//
@PointClass base(BaseProperties_matt_ttt) 
metadata
{
	entity_tool_name = "Role Button"
	entity_tool_group = "TTT"
	entity_tool_tip = "Used to provide an on-screen button for a role to activate."
}
= ttt_role_button : ""
[
	check_value(string) : "Role" : "Traitor" : "The name of the `Role` to check for. Ex. Innocent, Detective, Traitor"
	description(string) : "Description" :  : "On screen tooltip shown on button."
	range(integer) : "Range" : 1024 : "Maximum range a player can see and activate a button. Buttons are fully opaque within 512 units."
	delay(integer) : "Delay" : 1 : "Delay in seconds until button will reactive once triggered. Hammer doesn't like using decimal values, so this only takes integers."
	remove_on_press(boolean) : "Remove On Press" : 0 : "Only allows button to be pressed once per round."
	locked(boolean) : "Locked" : 0 : "Is the button locked? If enabled, button needs to be unlocked with the `Unlock` or `Toggle` input."

	input Press(void) : ""
	input Lock(void) : ""
	input Unlock(void) : ""
	input Toggle(void) : ""

	output OnPressed(void) : ""
]

//
// TTT.DecoyEntity
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/decoy/decoy.vmdl" ) model() = ttt_entity_decoy : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.HealthStationEntity
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/health_station/health_station.vmdl" ) model() = ttt_entity_healthstation : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// TTT.RadioEntity
//
@PointClass base(BaseProperties_matt_ttt, BasePhysicsSimulated) tags( Physics ) editormodel( "models/radio/radio.vmdl" ) model() = ttt_entity_radio : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	static(boolean) : "Static" : 0 : "If set, the prop will spawn with motion disabled and will act as a nav blocker until broken."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

